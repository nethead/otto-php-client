<?php
/**
 * PartialRefund
 *
 * PHP version 5
 *
 * @category Class
 * @package  Otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Receipts API
 *
 * Interface for the partner to get receipts information
 *
 * OpenAPI spec version: 2.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Otto\Client\Receipts\Model;

use \ArrayAccess;
use \Otto\Client\ObjectSerializer;

/**
 * PartialRefund Class Doc Comment
 *
 * @category Class
 * @description Provides details about a previous partial refund of an individual position item within refund receipts.
 * @package  Otto\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PartialRefund implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PartialRefund';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'receipt_number' => 'string',
'position_item_id' => 'string',
'receipt_creation_date' => '\DateTime',
'partial_refund_amount' => '\Otto\Client\Receipts\Model\AllOfPartialRefundPartialRefundAmount'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'receipt_number' => null,
'position_item_id' => 'uuid',
'receipt_creation_date' => 'date-time',
'partial_refund_amount' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'receipt_number' => 'receiptNumber',
'position_item_id' => 'positionItemId',
'receipt_creation_date' => 'receiptCreationDate',
'partial_refund_amount' => 'partialRefundAmount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'receipt_number' => 'setReceiptNumber',
'position_item_id' => 'setPositionItemId',
'receipt_creation_date' => 'setReceiptCreationDate',
'partial_refund_amount' => 'setPartialRefundAmount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'receipt_number' => 'getReceiptNumber',
'position_item_id' => 'getPositionItemId',
'receipt_creation_date' => 'getReceiptCreationDate',
'partial_refund_amount' => 'getPartialRefundAmount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['receipt_number'] = isset($data['receipt_number']) ? $data['receipt_number'] : null;
        $this->container['position_item_id'] = isset($data['position_item_id']) ? $data['position_item_id'] : null;
        $this->container['receipt_creation_date'] = isset($data['receipt_creation_date']) ? $data['receipt_creation_date'] : null;
        $this->container['partial_refund_amount'] = isset($data['partial_refund_amount']) ? $data['partial_refund_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['receipt_number'] === null) {
            $invalidProperties[] = "'receipt_number' can't be null";
        }
        if ($this->container['position_item_id'] === null) {
            $invalidProperties[] = "'position_item_id' can't be null";
        }
        if ($this->container['receipt_creation_date'] === null) {
            $invalidProperties[] = "'receipt_creation_date' can't be null";
        }
        if ($this->container['partial_refund_amount'] === null) {
            $invalidProperties[] = "'partial_refund_amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets receipt_number
     *
     * @return string
     */
    public function getReceiptNumber()
    {
        return $this->container['receipt_number'];
    }

    /**
     * Sets receipt_number
     *
     * @param string $receipt_number Unique identifier for the partial reimbursement receipt. Printed on the partial reimbursement receipt and is used to identify the receipt in case of contact between user and partner.
     *
     * @return $this
     */
    public function setReceiptNumber($receipt_number)
    {
        $this->container['receipt_number'] = $receipt_number;

        return $this;
    }

    /**
     * Gets position_item_id
     *
     * @return string
     */
    public function getPositionItemId()
    {
        return $this->container['position_item_id'];
    }

    /**
     * Sets position_item_id
     *
     * @param string $position_item_id Reference to the position item that is partially reimbursed.
     *
     * @return $this
     */
    public function setPositionItemId($position_item_id)
    {
        $this->container['position_item_id'] = $position_item_id;

        return $this;
    }

    /**
     * Gets receipt_creation_date
     *
     * @return \DateTime
     */
    public function getReceiptCreationDate()
    {
        return $this->container['receipt_creation_date'];
    }

    /**
     * Sets receipt_creation_date
     *
     * @param \DateTime $receipt_creation_date Date and time when corresponding receipt for partial reimbursement was created by system.
     *
     * @return $this
     */
    public function setReceiptCreationDate($receipt_creation_date)
    {
        $this->container['receipt_creation_date'] = $receipt_creation_date;

        return $this;
    }

    /**
     * Gets partial_refund_amount
     *
     * @return AllOfPartialRefundPartialRefundAmount
     */
    public function getPartialRefundAmount()
    {
        return $this->container['partial_refund_amount'];
    }

    /**
     * Sets partial_refund_amount
     *
     * @param AllOfPartialRefundPartialRefundAmount $partial_refund_amount Amount which was partially reimbursed
     *
     * @return $this
     */
    public function setPartialRefundAmount($partial_refund_amount)
    {
        $this->container['partial_refund_amount'] = $partial_refund_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
